openapi: 3.0.3
info:
  title: Swagger PMS - OpenAPI 3.0 / As YAML
  description: This is Swagger Doc for PMS system
  version: 1.0.0
  termsOfService: http://winz.com.hk/
  contact:
    email: winz@winz.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:3500/api/v1
schemes:
  - http  
tags:
  - name: User
    description: Operations about user
  - name: Property
    description: Operations about The Property
  - name: Lease
    description: Operations about The Lease
    externalDocs:
      description: Find out more about our store
      url: http://www.winz.com.hk/
paths:
  /user/register:
    post:
      tags:
        - User
      summary: Create New User
      description: To register New user.
      operationId: register
      requestBody:
        description: To Create new user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegister'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserRegister'
  /user/login:
    post:
      tags:
        - User
      summary: login user
      description: login existing user with his Credentials.
      operationId: login
      requestBody:
        description: User Credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogin'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserLogin'
        '400':
          description: Bad Request - Please provide email and password.                
        '401':
          description: Invalid Password.
        '404': 
          description: Invalid User.                
  /user/logout:
    post:
      tags:
        - User
      summary: Logout User 
      description: 'Log out the current logged in user session'
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/getUserById/{Id}:
    post:
      tags:
        - User
      summary: Get the single User..
      description: 'Get the single User by _id'
      operationId: getUserById
      parameters: 
        - in: path
          name: Id
          required: true
          description: 'Mongodb _id of the User to get'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Please enter Valid User ID
        '401':
          description: Invalid User ID
        '404':
          description: User not found
  /user/editUserById/{Id}:
    put:
      tags:
        - User
      summary: Edit user
      description: 'Edit the User by _id'
      operationId: editUserById
      parameters:
        - name: Id
          in: path
          description: 'Mongodb _id of the User to be edited'
          required: true
          schema:
            type: string
      requestBody:
        description: Edit an existing user in the DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEdit'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserEdit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserEdit'
      responses:
        default:
          description: successful operation
        '401':
          description: Invalid User ID.
        '404': 
          description: User Not Found.                
  /user/editUserById/{Id}:
  /user/deleteUserById/{Id}:
    delete:
      tags:
        - User
      summary: Delete user
      description: 'Delete the User by _id'
      operationId: deleteUser
      parameters:
        - name: Id
          in: path
          description: 'Mongodb _id of the User to be Deleted'
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid User _id supplied
        '404':
          description: User not found
components:
  schemas:
    UserRegister:
      type: object
      properties:
        displayName:
          type: string
          example: John Doe
        userName:
          type: string
          example: john Doe
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '1-818-123321'
        address:
          type: object
          properties:
            street1:
              type: string
              example: Street name - 1
            street2:
              type: string
              example: Street name - 2
            city:
              type: string
              example: New York
            state:
              type: string
              example: N.Y.
            country:
              type: string
              example: USA.
            zip:
              type: string
              example: 600011
      xml:
        name: userRegister
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
      xml:
        name: userLogin
    UserEdit:
      type: object
      properties:
        displayName:
          type: string
          example: John Doe
        userName:
          type: string
          example: john Doe
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '1-818-123321'
        address:
          type: object
          properties:
            street1:
              type: string
              example: Street name - 1
            street2:
              type: string
              example: Street name - 2
            city:
              type: string
              example: New York
            state:
              type: string
              example: N.Y.
            country:
              type: string
              example: USA.
            zip:
              type: string
              example: 600011
      xml:
        name: UserEdit
      
          
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    cookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: refreshToken  # cookie name
    api_key:
      type: apiKey
      name: api_key
      in: header
